version: '3.8'

services:
  dev:
    container_name: api_dev
    image: nestjs-api-dev:1.0.0
    working_dir: /usr/src/app
    build:
      context: .
      target: development
      dockerfile: ./Dockerfile
    command: npm run start:dev
    environment:
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_USER=${DATABASE_USER}
      - DATABASE_PASS=${DATABASE_PASS}
      - DATABASE_NAME=${DATABASE_NAME}
      - REDIS_HOST=redis
      - REDIS_PORT=${REDIS_PORT}
      - RABBITMQ_URL=amqp://rabbitmq:5672
    ports:
      - 3000:3000
    networks:
      - nesjs-network
    depends_on:
      - postgres
      - redis
      - rabbitmq
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    restart: unless-stopped

  prod:
    container_name: nestjs_api_prod
    image: nestjs-api-prod:1.0.0
    build:
      context: .
      target: production
      dockerfile: ./Dockerfile
    command: npm run start:prod
    ports:
      - 3000:3000
    networks:
      - nesjs-network
    volumes:
      - .:/usr/src/app
#      - /usr/src/app/node_modules
    restart: unless-stopped

  postgres:
    image: postgres:14.2
    container_name: postgres
    restart: always
    environment:
      - POSTGRES_USER=${DATABASE_USER}
      - POSTGRES_PASSWORD=${DATABASE_PASS}
      - POSTGRES_DB=${DATABASE_NAME}
    volumes:
      - ./pg_data:/var/lib/postgresql/data
    ports:
      - "54321:5432"
    networks:
      - nesjs-network

  redis:
    image: redis:alpine
    container_name: redis_db
    command: redis-server --appendonly yes
    ports:
      - 63791:6379
    volumes:
      - ./redis:/data
    restart: always
    networks:
      - nesjs-network

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq_nest
    restart: always
    ports:
      - 5672:5672
      - 15672:15672
    volumes:
      - ./rabbitmq_d/:/var/lib/rabbitmq/
    #      - ./rabbitmq_log/log/:/var/log/rabbitmq/
    networks:
      - nesjs-network

networks:
  nesjs-network:
